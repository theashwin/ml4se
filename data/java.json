[{"code": "public Blob reload() {\n    // [START reload]\n    Blob latestBlob = blob.reload(BlobSourceOption.generationNotMatch());\n    if (latestBlob == null) {\n      // the blob was not found\n    }\n    // [END reload]\n    return latestBlob;\n  }", "code_tokens": ["public", "Blob", "reload", "(", ")", "{", "// [START reload]", "Blob", "latestBlob", "=", "blob", ".", "reload", "(", "BlobSourceOption", ".", "generationNotMatch", "(", ")", ")", ";", "if", "(", "latestBlob", "==", "null", ")", "{", "// the blob was not found", "}", "// [END reload]", "return", "latestBlob", ";", "}"], "original_string": "public Blob reload() {\n    // [START reload]\n    Blob latestBlob = blob.reload(BlobSourceOption.generationNotMatch());\n    if (latestBlob == null) {\n      // the blob was not found\n    }\n    // [END reload]\n    return latestBlob;\n  }"}, {"code": "@Override\r\n\tpublic EClass getIfcMonthInYearNumber() {\r\n\t\tif (ifcMonthInYearNumberEClass == null) {\r\n\t\t\tifcMonthInYearNumberEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(846);\r\n\t\t}\r\n\t\treturn ifcMonthInYearNumberEClass;\r\n\t}", "code_tokens": ["@", "Override", "public", "EClass", "getIfcMonthInYearNumber", "(", ")", "{", "if", "(", "ifcMonthInYearNumberEClass", "==", "null", ")", "{", "ifcMonthInYearNumberEClass", "=", "(", "EClass", ")", "EPackage", ".", "Registry", ".", "INSTANCE", ".", "getEPackage", "(", "Ifc4Package", ".", "eNS_URI", ")", ".", "getEClassifiers", "(", ")", ".", "get", "(", "846", ")", ";", "}", "return", "ifcMonthInYearNumberEClass", ";", "}"], "original_string": "@Override\r\n\tpublic EClass getIfcMonthInYearNumber() {\r\n\t\tif (ifcMonthInYearNumberEClass == null) {\r\n\t\t\tifcMonthInYearNumberEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(846);\r\n\t\t}\r\n\t\treturn ifcMonthInYearNumberEClass;\r\n\t}"}, {"code": "@SuppressWarnings(\"unchecked\")\n    public static <T> T asType(Object obj, Class<T> type) {\n        if (String.class == type) {\n            return (T) InvokerHelper.toString(obj);\n        }\n\n        // fall back to cast\n        try {\n            return (T) DefaultTypeTransformation.castToType(obj, type);\n        }\n        catch (GroovyCastException e) {\n            MetaClass mc = InvokerHelper.getMetaClass(obj);\n            if (mc instanceof ExpandoMetaClass) {\n                ExpandoMetaClass emc = (ExpandoMetaClass) mc;\n                Object mixedIn = emc.castToMixedType(obj, type);\n                if (mixedIn != null)\n                    return (T) mixedIn;\n            }\n            if (type.isInterface()) {\n                try {\n                    List<Class> interfaces = new ArrayList<Class>();\n                    interfaces.add(type);\n                    return (T) ProxyGenerator.INSTANCE.instantiateDelegate(interfaces, obj);\n                } catch (GroovyRuntimeException cause) {\n                    // ignore\n                }\n            }\n            throw e;\n        }\n    }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "T", ">", "T", "asType", "(", "Object", "obj", ",", "Class", "<", "T", ">", "type", ")", "{", "if", "(", "String", ".", "class", "==", "type", ")", "{", "return", "(", "T", ")", "InvokerHelper", ".", "toString", "(", "obj", ")", ";", "}", "// fall back to cast", "try", "{", "return", "(", "T", ")", "DefaultTypeTransformation", ".", "castToType", "(", "obj", ",", "type", ")", ";", "}", "catch", "(", "GroovyCastException", "e", ")", "{", "MetaClass", "mc", "=", "InvokerHelper", ".", "getMetaClass", "(", "obj", ")", ";", "if", "(", "mc", "instanceof", "ExpandoMetaClass", ")", "{", "ExpandoMetaClass", "emc", "=", "(", "ExpandoMetaClass", ")", "mc", ";", "Object", "mixedIn", "=", "emc", ".", "castToMixedType", "(", "obj", ",", "type", ")", ";", "if", "(", "mixedIn", "!=", "null", ")", "return", "(", "T", ")", "mixedIn", ";", "}", "if", "(", "type", ".", "isInterface", "(", ")", ")", "{", "try", "{", "List", "<", "Class", ">", "interfaces", "=", "new", "ArrayList", "<", "Class", ">", "(", ")", ";", "interfaces", ".", "add", "(", "type", ")", ";", "return", "(", "T", ")", "ProxyGenerator", ".", "INSTANCE", ".", "instantiateDelegate", "(", "interfaces", ",", "obj", ")", ";", "}", "catch", "(", "GroovyRuntimeException", "cause", ")", "{", "// ignore", "}", "}", "throw", "e", ";", "}", "}"], "original_string": "@SuppressWarnings(\"unchecked\")\n    public static <T> T asType(Object obj, Class<T> type) {\n        if (String.class == type) {\n            return (T) InvokerHelper.toString(obj);\n        }\n\n        // fall back to cast\n        try {\n            return (T) DefaultTypeTransformation.castToType(obj, type);\n        }\n        catch (GroovyCastException e) {\n            MetaClass mc = InvokerHelper.getMetaClass(obj);\n            if (mc instanceof ExpandoMetaClass) {\n                ExpandoMetaClass emc = (ExpandoMetaClass) mc;\n                Object mixedIn = emc.castToMixedType(obj, type);\n                if (mixedIn != null)\n                    return (T) mixedIn;\n            }\n            if (type.isInterface()) {\n                try {\n                    List<Class> interfaces = new ArrayList<Class>();\n                    interfaces.add(type);\n                    return (T) ProxyGenerator.INSTANCE.instantiateDelegate(interfaces, obj);\n                } catch (GroovyRuntimeException cause) {\n                    // ignore\n                }\n            }\n            throw e;\n        }\n    }"}, {"code": "@Override\n    public void unpark(Notifier notifier) {\n        WaitNotifyKey waitNotifyKey = notifier.getNotifiedKey();\n        WaitSet waitSet = waitSetMap.get(waitNotifyKey);\n        if (waitSet != null) {\n            waitSet.unpark(notifier, waitNotifyKey);\n        }\n    }", "code_tokens": ["@", "Override", "public", "void", "unpark", "(", "Notifier", "notifier", ")", "{", "WaitNotifyKey", "waitNotifyKey", "=", "notifier", ".", "getNotifiedKey", "(", ")", ";", "WaitSet", "waitSet", "=", "waitSetMap", ".", "get", "(", "waitNotifyKey", ")", ";", "if", "(", "waitSet", "!=", "null", ")", "{", "waitSet", ".", "unpark", "(", "notifier", ",", "waitNotifyKey", ")", ";", "}", "}"], "original_string": "@Override\n    public void unpark(Notifier notifier) {\n        WaitNotifyKey waitNotifyKey = notifier.getNotifiedKey();\n        WaitSet waitSet = waitSetMap.get(waitNotifyKey);\n        if (waitSet != null) {\n            waitSet.unpark(notifier, waitNotifyKey);\n        }\n    }"}, {"code": "private int openDoor(int pid) throws IOException {\n        String path = tmpdir + \"/.java_pid\" + pid;;\n        fd = open(path);\n\n        // Check that the file owner/permission to avoid attaching to\n        // bogus process\n        try {\n            checkPermissions(path);\n        } catch (IOException ioe) {\n            close(fd);\n            throw ioe;\n        }\n        return fd;\n    }", "code_tokens": ["private", "int", "openDoor", "(", "int", "pid", ")", "throws", "IOException", "{", "String", "path", "=", "tmpdir", "+", "\"/.java_pid\"", "+", "pid", ";", ";", "fd", "=", "open", "(", "path", ")", ";", "// Check that the file owner/permission to avoid attaching to", "// bogus process", "try", "{", "checkPermissions", "(", "path", ")", ";", "}", "catch", "(", "IOException", "ioe", ")", "{", "close", "(", "fd", ")", ";", "throw", "ioe", ";", "}", "return", "fd", ";", "}"], "original_string": "private int openDoor(int pid) throws IOException {\n        String path = tmpdir + \"/.java_pid\" + pid;;\n        fd = open(path);\n\n        // Check that the file owner/permission to avoid attaching to\n        // bogus process\n        try {\n            checkPermissions(path);\n        } catch (IOException ioe) {\n            close(fd);\n            throw ioe;\n        }\n        return fd;\n    }"}, {"code": "static void requestOverlay(Source source) {\n        Intent intent = new Intent(source.getContext(), BridgeActivity.class);\n        intent.putExtra(KEY_TYPE, BridgeRequest.TYPE_OVERLAY);\n        source.startActivity(intent);\n    }", "code_tokens": ["static", "void", "requestOverlay", "(", "Source", "source", ")", "{", "Intent", "intent", "=", "new", "Intent", "(", "source", ".", "getContext", "(", ")", ",", "BridgeActivity", ".", "class", ")", ";", "intent", ".", "putExtra", "(", "KEY_TYPE", ",", "BridgeRequest", ".", "TYPE_OVERLAY", ")", ";", "source", ".", "startActivity", "(", "intent", ")", ";", "}"], "original_string": "static void requestOverlay(Source source) {\n        Intent intent = new Intent(source.getContext(), BridgeActivity.class);\n        intent.putExtra(KEY_TYPE, BridgeRequest.TYPE_OVERLAY);\n        source.startActivity(intent);\n    }"}, {"code": "public TargetGroupsConfig withTargetGroups(TargetGroup... targetGroups) {\n        if (this.targetGroups == null) {\n            setTargetGroups(new com.amazonaws.internal.SdkInternalList<TargetGroup>(targetGroups.length));\n        }\n        for (TargetGroup ele : targetGroups) {\n            this.targetGroups.add(ele);\n        }\n        return this;\n    }", "code_tokens": ["public", "TargetGroupsConfig", "withTargetGroups", "(", "TargetGroup", "...", "targetGroups", ")", "{", "if", "(", "this", ".", "targetGroups", "==", "null", ")", "{", "setTargetGroups", "(", "new", "com", ".", "amazonaws", ".", "internal", ".", "SdkInternalList", "<", "TargetGroup", ">", "(", "targetGroups", ".", "length", ")", ")", ";", "}", "for", "(", "TargetGroup", "ele", ":", "targetGroups", ")", "{", "this", ".", "targetGroups", ".", "add", "(", "ele", ")", ";", "}", "return", "this", ";", "}"], "original_string": "public TargetGroupsConfig withTargetGroups(TargetGroup... targetGroups) {\n        if (this.targetGroups == null) {\n            setTargetGroups(new com.amazonaws.internal.SdkInternalList<TargetGroup>(targetGroups.length));\n        }\n        for (TargetGroup ele : targetGroups) {\n            this.targetGroups.add(ele);\n        }\n        return this;\n    }"}, {"code": "public static void assertNotEquals(String message, double unexpected,\n            double actual, double delta) {\n        if (!doubleIsDifferent(unexpected, actual, delta)) {\n            failEquals(message, Double.valueOf(actual));\n        }\n    }", "code_tokens": ["public", "static", "void", "assertNotEquals", "(", "String", "message", ",", "double", "unexpected", ",", "double", "actual", ",", "double", "delta", ")", "{", "if", "(", "!", "doubleIsDifferent", "(", "unexpected", ",", "actual", ",", "delta", ")", ")", "{", "failEquals", "(", "message", ",", "Double", ".", "valueOf", "(", "actual", ")", ")", ";", "}", "}"], "original_string": "public static void assertNotEquals(String message, double unexpected,\n            double actual, double delta) {\n        if (!doubleIsDifferent(unexpected, actual, delta)) {\n            failEquals(message, Double.valueOf(actual));\n        }\n    }"}, {"code": "@Override\n  protected void onResponseImpl(InnerT response) {\n    IllegalStateException error = null;\n\n    // Guard against unsolicited notifications\n    if (!awaitingInner || !newItem.compareAndSet(null, response)) {\n      // Notify downstream if it's still open\n      error = new IllegalStateException(\"Received unsolicited response from upstream.\");\n      cancellation.compareAndSet(null, error);\n    }\n    deliver();\n\n    // Notify upstream by throwing an exception\n    if (error != null) {\n      throw error;\n    }\n  }", "code_tokens": ["@", "Override", "protected", "void", "onResponseImpl", "(", "InnerT", "response", ")", "{", "IllegalStateException", "error", "=", "null", ";", "// Guard against unsolicited notifications", "if", "(", "!", "awaitingInner", "||", "!", "newItem", ".", "compareAndSet", "(", "null", ",", "response", ")", ")", "{", "// Notify downstream if it's still open", "error", "=", "new", "IllegalStateException", "(", "\"Received unsolicited response from upstream.\"", ")", ";", "cancellation", ".", "compareAndSet", "(", "null", ",", "error", ")", ";", "}", "deliver", "(", ")", ";", "// Notify upstream by throwing an exception", "if", "(", "error", "!=", "null", ")", "{", "throw", "error", ";", "}", "}"], "original_string": "@Override\n  protected void onResponseImpl(InnerT response) {\n    IllegalStateException error = null;\n\n    // Guard against unsolicited notifications\n    if (!awaitingInner || !newItem.compareAndSet(null, response)) {\n      // Notify downstream if it's still open\n      error = new IllegalStateException(\"Received unsolicited response from upstream.\");\n      cancellation.compareAndSet(null, error);\n    }\n    deliver();\n\n    // Notify upstream by throwing an exception\n    if (error != null) {\n      throw error;\n    }\n  }"}, {"code": "public void waitForAllActivitiesDestroy(int timeOutInMillis) {\n        synchronized (activityStack) {\n            long start = System.currentTimeMillis();\n            long now = start;\n            while (!activityStack.isEmpty() && start + timeOutInMillis > now) {\n                try {\n                    activityStack.wait(start - now + timeOutInMillis);\n                } catch (InterruptedException ignored) {\n                }\n                now = System.currentTimeMillis();\n            }\n        }\n    }", "code_tokens": ["public", "void", "waitForAllActivitiesDestroy", "(", "int", "timeOutInMillis", ")", "{", "synchronized", "(", "activityStack", ")", "{", "long", "start", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "long", "now", "=", "start", ";", "while", "(", "!", "activityStack", ".", "isEmpty", "(", ")", "&&", "start", "+", "timeOutInMillis", ">", "now", ")", "{", "try", "{", "activityStack", ".", "wait", "(", "start", "-", "now", "+", "timeOutInMillis", ")", ";", "}", "catch", "(", "InterruptedException", "ignored", ")", "{", "}", "now", "=", "System", ".", "currentTimeMillis", "(", ")", ";", "}", "}", "}"], "original_string": "public void waitForAllActivitiesDestroy(int timeOutInMillis) {\n        synchronized (activityStack) {\n            long start = System.currentTimeMillis();\n            long now = start;\n            while (!activityStack.isEmpty() && start + timeOutInMillis > now) {\n                try {\n                    activityStack.wait(start - now + timeOutInMillis);\n                } catch (InterruptedException ignored) {\n                }\n                now = System.currentTimeMillis();\n            }\n        }\n    }"}, {"code": "public TableResult list(Schema schema, TableDataListOption... options) throws BigQueryException {\n    return bigquery.listTableData(getTableId(), schema, options);\n  }", "code_tokens": ["public", "TableResult", "list", "(", "Schema", "schema", ",", "TableDataListOption", "...", "options", ")", "throws", "BigQueryException", "{", "return", "bigquery", ".", "listTableData", "(", "getTableId", "(", ")", ",", "schema", ",", "options", ")", ";", "}"], "original_string": "public TableResult list(Schema schema, TableDataListOption... options) throws BigQueryException {\n    return bigquery.listTableData(getTableId(), schema, options);\n  }"}, {"code": "public void setCodeDeliveryDetailsList(java.util.Collection<CodeDeliveryDetailsType> codeDeliveryDetailsList) {\n        if (codeDeliveryDetailsList == null) {\n            this.codeDeliveryDetailsList = null;\n            return;\n        }\n\n        this.codeDeliveryDetailsList = new java.util.ArrayList<CodeDeliveryDetailsType>(codeDeliveryDetailsList);\n    }", "code_tokens": ["public", "void", "setCodeDeliveryDetailsList", "(", "java", ".", "util", ".", "Collection", "<", "CodeDeliveryDetailsType", ">", "codeDeliveryDetailsList", ")", "{", "if", "(", "codeDeliveryDetailsList", "==", "null", ")", "{", "this", ".", "codeDeliveryDetailsList", "=", "null", ";", "return", ";", "}", "this", ".", "codeDeliveryDetailsList", "=", "new", "java", ".", "util", ".", "ArrayList", "<", "CodeDeliveryDetailsType", ">", "(", "codeDeliveryDetailsList", ")", ";", "}"], "original_string": "public void setCodeDeliveryDetailsList(java.util.Collection<CodeDeliveryDetailsType> codeDeliveryDetailsList) {\n        if (codeDeliveryDetailsList == null) {\n            this.codeDeliveryDetailsList = null;\n            return;\n        }\n\n        this.codeDeliveryDetailsList = new java.util.ArrayList<CodeDeliveryDetailsType>(codeDeliveryDetailsList);\n    }"}, {"code": "@Deprecated\n    public static DistributionSummary summaryWithDefaultQuantiles(MeterRegistry registry,\n                                                                  String name, Iterable<Tag> tags) {\n        requireNonNull(registry, \"registry\");\n        requireNonNull(name, \"name\");\n        requireNonNull(tags, \"tags\");\n        return DistributionSummary.builder(name)\n                                  .tags(tags)\n                                  .publishPercentiles(PERCENTILES)\n                                  .register(registry);\n    }", "code_tokens": ["@", "Deprecated", "public", "static", "DistributionSummary", "summaryWithDefaultQuantiles", "(", "MeterRegistry", "registry", ",", "String", "name", ",", "Iterable", "<", "Tag", ">", "tags", ")", "{", "requireNonNull", "(", "registry", ",", "\"registry\"", ")", ";", "requireNonNull", "(", "name", ",", "\"name\"", ")", ";", "requireNonNull", "(", "tags", ",", "\"tags\"", ")", ";", "return", "DistributionSummary", ".", "builder", "(", "name", ")", ".", "tags", "(", "tags", ")", ".", "publishPercentiles", "(", "PERCENTILES", ")", ".", "register", "(", "registry", ")", ";", "}"], "original_string": "@Deprecated\n    public static DistributionSummary summaryWithDefaultQuantiles(MeterRegistry registry,\n                                                                  String name, Iterable<Tag> tags) {\n        requireNonNull(registry, \"registry\");\n        requireNonNull(name, \"name\");\n        requireNonNull(tags, \"tags\");\n        return DistributionSummary.builder(name)\n                                  .tags(tags)\n                                  .publishPercentiles(PERCENTILES)\n                                  .register(registry);\n    }"}, {"code": "public void setOptionsDependedOn(java.util.Collection<String> optionsDependedOn) {\n        if (optionsDependedOn == null) {\n            this.optionsDependedOn = null;\n            return;\n        }\n\n        this.optionsDependedOn = new com.amazonaws.internal.SdkInternalList<String>(optionsDependedOn);\n    }", "code_tokens": ["public", "void", "setOptionsDependedOn", "(", "java", ".", "util", ".", "Collection", "<", "String", ">", "optionsDependedOn", ")", "{", "if", "(", "optionsDependedOn", "==", "null", ")", "{", "this", ".", "optionsDependedOn", "=", "null", ";", "return", ";", "}", "this", ".", "optionsDependedOn", "=", "new", "com", ".", "amazonaws", ".", "internal", ".", "SdkInternalList", "<", "String", ">", "(", "optionsDependedOn", ")", ";", "}"], "original_string": "public void setOptionsDependedOn(java.util.Collection<String> optionsDependedOn) {\n        if (optionsDependedOn == null) {\n            this.optionsDependedOn = null;\n            return;\n        }\n\n        this.optionsDependedOn = new com.amazonaws.internal.SdkInternalList<String>(optionsDependedOn);\n    }"}, {"code": "public ChannelBuffer formatAggregatorsV1(final Set<String> aggregators) {\n    throw new BadRequestException(HttpResponseStatus.NOT_IMPLEMENTED, \n        \"The requested API endpoint has not been implemented\", \n        this.getClass().getCanonicalName() + \n        \" has not implemented formatAggregatorsV1\");\n  }", "code_tokens": ["public", "ChannelBuffer", "formatAggregatorsV1", "(", "final", "Set", "<", "String", ">", "aggregators", ")", "{", "throw", "new", "BadRequestException", "(", "HttpResponseStatus", ".", "NOT_IMPLEMENTED", ",", "\"The requested API endpoint has not been implemented\"", ",", "this", ".", "getClass", "(", ")", ".", "getCanonicalName", "(", ")", "+", "\" has not implemented formatAggregatorsV1\"", ")", ";", "}"], "original_string": "public ChannelBuffer formatAggregatorsV1(final Set<String> aggregators) {\n    throw new BadRequestException(HttpResponseStatus.NOT_IMPLEMENTED, \n        \"The requested API endpoint has not been implemented\", \n        this.getClass().getCanonicalName() + \n        \" has not implemented formatAggregatorsV1\");\n  }"}, {"code": "public static <T> T use(Class categoryClass, Closure<T> closure) {\n        return THREAD_INFO.getInfo().use(categoryClass, closure);\n    }", "code_tokens": ["public", "static", "<", "T", ">", "T", "use", "(", "Class", "categoryClass", ",", "Closure", "<", "T", ">", "closure", ")", "{", "return", "THREAD_INFO", ".", "getInfo", "(", ")", ".", "use", "(", "categoryClass", ",", "closure", ")", ";", "}"], "original_string": "public static <T> T use(Class categoryClass, Closure<T> closure) {\n        return THREAD_INFO.getInfo().use(categoryClass, closure);\n    }"}, {"code": "public static String safeToString(Object value) {\n    try {\n      // TODO(b/36844237): Re-evaluate if this is the best place for null handling (null is also\n      // handled for arguments via visitNull() and this is only for literal arguments).\n      return value != null ? toString(value) : \"null\";\n    } catch (RuntimeException e) {\n      return getErrorString(value, e);\n    }\n  }", "code_tokens": ["public", "static", "String", "safeToString", "(", "Object", "value", ")", "{", "try", "{", "// TODO(b/36844237): Re-evaluate if this is the best place for null handling (null is also", "// handled for arguments via visitNull() and this is only for literal arguments).", "return", "value", "!=", "null", "?", "toString", "(", "value", ")", ":", "\"null\"", ";", "}", "catch", "(", "RuntimeException", "e", ")", "{", "return", "getErrorString", "(", "value", ",", "e", ")", ";", "}", "}"], "original_string": "public static String safeToString(Object value) {\n    try {\n      // TODO(b/36844237): Re-evaluate if this is the best place for null handling (null is also\n      // handled for arguments via visitNull() and this is only for literal arguments).\n      return value != null ? toString(value) : \"null\";\n    } catch (RuntimeException e) {\n      return getErrorString(value, e);\n    }\n  }"}, {"code": "static List<Annotation> getAnnotations(AnnotatedElement element, EnumSet<FindOption> findOptions,\n                                           Predicate<Annotation> collectingFilter) {\n        requireNonNull(element, \"element\");\n        requireNonNull(collectingFilter, \"collectingFilter\");\n\n        final Builder<Annotation> builder = new Builder<>();\n\n        for (final AnnotatedElement e : resolveTargetElements(element, findOptions)) {\n            for (final Annotation annotation : e.getDeclaredAnnotations()) {\n                if (findOptions.contains(FindOption.LOOKUP_META_ANNOTATIONS)) {\n                    getMetaAnnotations(builder, annotation, collectingFilter);\n                }\n                if (collectingFilter.test(annotation)) {\n                    builder.add(annotation);\n                }\n            }\n        }\n        return builder.build();\n    }", "code_tokens": ["static", "List", "<", "Annotation", ">", "getAnnotations", "(", "AnnotatedElement", "element", ",", "EnumSet", "<", "FindOption", ">", "findOptions", ",", "Predicate", "<", "Annotation", ">", "collectingFilter", ")", "{", "requireNonNull", "(", "element", ",", "\"element\"", ")", ";", "requireNonNull", "(", "collectingFilter", ",", "\"collectingFilter\"", ")", ";", "final", "Builder", "<", "Annotation", ">", "builder", "=", "new", "Builder", "<>", "(", ")", ";", "for", "(", "final", "AnnotatedElement", "e", ":", "resolveTargetElements", "(", "element", ",", "findOptions", ")", ")", "{", "for", "(", "final", "Annotation", "annotation", ":", "e", ".", "getDeclaredAnnotations", "(", ")", ")", "{", "if", "(", "findOptions", ".", "contains", "(", "FindOption", ".", "LOOKUP_META_ANNOTATIONS", ")", ")", "{", "getMetaAnnotations", "(", "builder", ",", "annotation", ",", "collectingFilter", ")", ";", "}", "if", "(", "collectingFilter", ".", "test", "(", "annotation", ")", ")", "{", "builder", ".", "add", "(", "annotation", ")", ";", "}", "}", "}", "return", "builder", ".", "build", "(", ")", ";", "}"], "original_string": "static List<Annotation> getAnnotations(AnnotatedElement element, EnumSet<FindOption> findOptions,\n                                           Predicate<Annotation> collectingFilter) {\n        requireNonNull(element, \"element\");\n        requireNonNull(collectingFilter, \"collectingFilter\");\n\n        final Builder<Annotation> builder = new Builder<>();\n\n        for (final AnnotatedElement e : resolveTargetElements(element, findOptions)) {\n            for (final Annotation annotation : e.getDeclaredAnnotations()) {\n                if (findOptions.contains(FindOption.LOOKUP_META_ANNOTATIONS)) {\n                    getMetaAnnotations(builder, annotation, collectingFilter);\n                }\n                if (collectingFilter.test(annotation)) {\n                    builder.add(annotation);\n                }\n            }\n        }\n        return builder.build();\n    }"}, {"code": "static boolean isIncludeValue(EventFilter filter) {\n        // the order of the following ifs is important!\n        // QueryEventFilter is instance of EntryEventFilter\n        if (filter instanceof EventListenerFilter) {\n            filter = ((EventListenerFilter) filter).getEventFilter();\n        }\n        if (filter instanceof TrueEventFilter) {\n            return true;\n        }\n        if (filter instanceof QueryEventFilter) {\n            return ((QueryEventFilter) filter).isIncludeValue();\n        }\n        if (filter instanceof EntryEventFilter) {\n            return ((EntryEventFilter) filter).isIncludeValue();\n        }\n        throw new IllegalArgumentException(\"Unknown EventFilter type = [\" + filter.getClass().getCanonicalName() + \"]\");\n    }", "code_tokens": ["static", "boolean", "isIncludeValue", "(", "EventFilter", "filter", ")", "{", "// the order of the following ifs is important!", "// QueryEventFilter is instance of EntryEventFilter", "if", "(", "filter", "instanceof", "EventListenerFilter", ")", "{", "filter", "=", "(", "(", "EventListenerFilter", ")", "filter", ")", ".", "getEventFilter", "(", ")", ";", "}", "if", "(", "filter", "instanceof", "TrueEventFilter", ")", "{", "return", "true", ";", "}", "if", "(", "filter", "instanceof", "QueryEventFilter", ")", "{", "return", "(", "(", "QueryEventFilter", ")", "filter", ")", ".", "isIncludeValue", "(", ")", ";", "}", "if", "(", "filter", "instanceof", "EntryEventFilter", ")", "{", "return", "(", "(", "EntryEventFilter", ")", "filter", ")", ".", "isIncludeValue", "(", ")", ";", "}", "throw", "new", "IllegalArgumentException", "(", "\"Unknown EventFilter type = [\"", "+", "filter", ".", "getClass", "(", ")", ".", "getCanonicalName", "(", ")", "+", "\"]\"", ")", ";", "}"], "original_string": "static boolean isIncludeValue(EventFilter filter) {\n        // the order of the following ifs is important!\n        // QueryEventFilter is instance of EntryEventFilter\n        if (filter instanceof EventListenerFilter) {\n            filter = ((EventListenerFilter) filter).getEventFilter();\n        }\n        if (filter instanceof TrueEventFilter) {\n            return true;\n        }\n        if (filter instanceof QueryEventFilter) {\n            return ((QueryEventFilter) filter).isIncludeValue();\n        }\n        if (filter instanceof EntryEventFilter) {\n            return ((EntryEventFilter) filter).isIncludeValue();\n        }\n        throw new IllegalArgumentException(\"Unknown EventFilter type = [\" + filter.getClass().getCanonicalName() + \"]\");\n    }"}, {"code": "@SuppressWarnings(\"unchecked\")\r\n\t@Override\r\n\tpublic EList<IfcPerson> getCreators() {\r\n\t\treturn (EList<IfcPerson>) eGet(Ifc4Package.Literals.IFC_WORK_CONTROL__CREATORS, true);\r\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "@", "Override", "public", "EList", "<", "IfcPerson", ">", "getCreators", "(", ")", "{", "return", "(", "EList", "<", "IfcPerson", ">", ")", "eGet", "(", "Ifc4Package", ".", "Literals", ".", "IFC_WORK_CONTROL__CREATORS", ",", "true", ")", ";", "}"], "original_string": "@SuppressWarnings(\"unchecked\")\r\n\t@Override\r\n\tpublic EList<IfcPerson> getCreators() {\r\n\t\treturn (EList<IfcPerson>) eGet(Ifc4Package.Literals.IFC_WORK_CONTROL__CREATORS, true);\r\n\t}"}, {"code": "@Nullable\n  protected String getParentPath(String path) {\n    // Root does not have a parent.\n    if (isRoot(path)) {\n      return null;\n    }\n    int separatorIndex = path.lastIndexOf(PATH_SEPARATOR);\n    if (separatorIndex < 0) {\n      return null;\n    }\n    return path.substring(0, separatorIndex);\n  }", "code_tokens": ["@", "Nullable", "protected", "String", "getParentPath", "(", "String", "path", ")", "{", "// Root does not have a parent.", "if", "(", "isRoot", "(", "path", ")", ")", "{", "return", "null", ";", "}", "int", "separatorIndex", "=", "path", ".", "lastIndexOf", "(", "PATH_SEPARATOR", ")", ";", "if", "(", "separatorIndex", "<", "0", ")", "{", "return", "null", ";", "}", "return", "path", ".", "substring", "(", "0", ",", "separatorIndex", ")", ";", "}"], "original_string": "@Nullable\n  protected String getParentPath(String path) {\n    // Root does not have a parent.\n    if (isRoot(path)) {\n      return null;\n    }\n    int separatorIndex = path.lastIndexOf(PATH_SEPARATOR);\n    if (separatorIndex < 0) {\n      return null;\n    }\n    return path.substring(0, separatorIndex);\n  }"}, {"code": "@Override\r\n\tpublic EClass getIfcCircleProfileDef() {\r\n\t\tif (ifcCircleProfileDefEClass == null) {\r\n\t\t\tifcCircleProfileDefEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(93);\r\n\t\t}\r\n\t\treturn ifcCircleProfileDefEClass;\r\n\t}", "code_tokens": ["@", "Override", "public", "EClass", "getIfcCircleProfileDef", "(", ")", "{", "if", "(", "ifcCircleProfileDefEClass", "==", "null", ")", "{", "ifcCircleProfileDefEClass", "=", "(", "EClass", ")", "EPackage", ".", "Registry", ".", "INSTANCE", ".", "getEPackage", "(", "Ifc4Package", ".", "eNS_URI", ")", ".", "getEClassifiers", "(", ")", ".", "get", "(", "93", ")", ";", "}", "return", "ifcCircleProfileDefEClass", ";", "}"], "original_string": "@Override\r\n\tpublic EClass getIfcCircleProfileDef() {\r\n\t\tif (ifcCircleProfileDefEClass == null) {\r\n\t\t\tifcCircleProfileDefEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(93);\r\n\t\t}\r\n\t\treturn ifcCircleProfileDefEClass;\r\n\t}"}, {"code": "public static boolean deleteContents(File directory) {\n    File[] files = directory.listFiles();\n    boolean success = true;\n    if (files != null) {\n      for (File file : files) {\n        success &= deleteRecursively(file);\n      }\n    }\n    return success;\n  }", "code_tokens": ["public", "static", "boolean", "deleteContents", "(", "File", "directory", ")", "{", "File", "[", "]", "files", "=", "directory", ".", "listFiles", "(", ")", ";", "boolean", "success", "=", "true", ";", "if", "(", "files", "!=", "null", ")", "{", "for", "(", "File", "file", ":", "files", ")", "{", "success", "&=", "deleteRecursively", "(", "file", ")", ";", "}", "}", "return", "success", ";", "}"], "original_string": "public static boolean deleteContents(File directory) {\n    File[] files = directory.listFiles();\n    boolean success = true;\n    if (files != null) {\n      for (File file : files) {\n        success &= deleteRecursively(file);\n      }\n    }\n    return success;\n  }"}, {"code": "public void readPOSDICT(String path, String suffix) throws IOException {\n\t\tDictPOS dp = new DictPOS();\n\t\tdp.loadPath(path,suffix);\n\t\tset.addAll(dp.dict.keySet());\n\t}", "code_tokens": ["public", "void", "readPOSDICT", "(", "String", "path", ",", "String", "suffix", ")", "throws", "IOException", "{", "DictPOS", "dp", "=", "new", "DictPOS", "(", ")", ";", "dp", ".", "loadPath", "(", "path", ",", "suffix", ")", ";", "set", ".", "addAll", "(", "dp", ".", "dict", ".", "keySet", "(", ")", ")", ";", "}"], "original_string": "public void readPOSDICT(String path, String suffix) throws IOException {\n\t\tDictPOS dp = new DictPOS();\n\t\tdp.loadPath(path,suffix);\n\t\tset.addAll(dp.dict.keySet());\n\t}"}, {"code": "private String getPollDir() {\n    String pollDir = mProperties.getProperty(CSV_KEY_DIR);\n    return pollDir != null ? pollDir : CSV_DEFAULT_DIR;\n  }", "code_tokens": ["private", "String", "getPollDir", "(", ")", "{", "String", "pollDir", "=", "mProperties", ".", "getProperty", "(", "CSV_KEY_DIR", ")", ";", "return", "pollDir", "!=", "null", "?", "pollDir", ":", "CSV_DEFAULT_DIR", ";", "}"], "original_string": "private String getPollDir() {\n    String pollDir = mProperties.getProperty(CSV_KEY_DIR);\n    return pollDir != null ? pollDir : CSV_DEFAULT_DIR;\n  }"}, {"code": "public void marshall(AudioNormalizationSettings audioNormalizationSettings, ProtocolMarshaller protocolMarshaller) {\n\n        if (audioNormalizationSettings == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(audioNormalizationSettings.getAlgorithm(), ALGORITHM_BINDING);\n            protocolMarshaller.marshall(audioNormalizationSettings.getAlgorithmControl(), ALGORITHMCONTROL_BINDING);\n            protocolMarshaller.marshall(audioNormalizationSettings.getTargetLkfs(), TARGETLKFS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "code_tokens": ["public", "void", "marshall", "(", "AudioNormalizationSettings", "audioNormalizationSettings", ",", "ProtocolMarshaller", "protocolMarshaller", ")", "{", "if", "(", "audioNormalizationSettings", "==", "null", ")", "{", "throw", "new", "SdkClientException", "(", "\"Invalid argument passed to marshall(...)\"", ")", ";", "}", "try", "{", "protocolMarshaller", ".", "marshall", "(", "audioNormalizationSettings", ".", "getAlgorithm", "(", ")", ",", "ALGORITHM_BINDING", ")", ";", "protocolMarshaller", ".", "marshall", "(", "audioNormalizationSettings", ".", "getAlgorithmControl", "(", ")", ",", "ALGORITHMCONTROL_BINDING", ")", ";", "protocolMarshaller", ".", "marshall", "(", "audioNormalizationSettings", ".", "getTargetLkfs", "(", ")", ",", "TARGETLKFS_BINDING", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "SdkClientException", "(", "\"Unable to marshall request to JSON: \"", "+", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "original_string": "public void marshall(AudioNormalizationSettings audioNormalizationSettings, ProtocolMarshaller protocolMarshaller) {\n\n        if (audioNormalizationSettings == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(audioNormalizationSettings.getAlgorithm(), ALGORITHM_BINDING);\n            protocolMarshaller.marshall(audioNormalizationSettings.getAlgorithmControl(), ALGORITHMCONTROL_BINDING);\n            protocolMarshaller.marshall(audioNormalizationSettings.getTargetLkfs(), TARGETLKFS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }"}, {"code": "private void installPackage() {\n        AndPermission.with(this)\n            .install()\n            .file(new File(Environment.getExternalStorageDirectory(), \"android.apk\"))\n            .rationale(new InstallRationale())\n            .onGranted(new Action<File>() {\n                @Override\n                public void onAction(File data) {\n                    // Installing.\n                    toast(R.string.successfully);\n                }\n            })\n            .onDenied(new Action<File>() {\n                @Override\n                public void onAction(File data) {\n                    // The user refused to install.\n                    toast(R.string.failure);\n                }\n            })\n            .start();\n    }", "code_tokens": ["private", "void", "installPackage", "(", ")", "{", "AndPermission", ".", "with", "(", "this", ")", ".", "install", "(", ")", ".", "file", "(", "new", "File", "(", "Environment", ".", "getExternalStorageDirectory", "(", ")", ",", "\"android.apk\"", ")", ")", ".", "rationale", "(", "new", "InstallRationale", "(", ")", ")", ".", "onGranted", "(", "new", "Action", "<", "File", ">", "(", ")", "{", "@", "Override", "public", "void", "onAction", "(", "File", "data", ")", "{", "// Installing.", "toast", "(", "R", ".", "string", ".", "successfully", ")", ";", "}", "}", ")", ".", "onDenied", "(", "new", "Action", "<", "File", ">", "(", ")", "{", "@", "Override", "public", "void", "onAction", "(", "File", "data", ")", "{", "// The user refused to install.", "toast", "(", "R", ".", "string", ".", "failure", ")", ";", "}", "}", ")", ".", "start", "(", ")", ";", "}"], "original_string": "private void installPackage() {\n        AndPermission.with(this)\n            .install()\n            .file(new File(Environment.getExternalStorageDirectory(), \"android.apk\"))\n            .rationale(new InstallRationale())\n            .onGranted(new Action<File>() {\n                @Override\n                public void onAction(File data) {\n                    // Installing.\n                    toast(R.string.successfully);\n                }\n            })\n            .onDenied(new Action<File>() {\n                @Override\n                public void onAction(File data) {\n                    // The user refused to install.\n                    toast(R.string.failure);\n                }\n            })\n            .start();\n    }"}, {"code": "@SuppressWarnings(\"unchecked\")\r\n\t@Override\r\n\tpublic EList<IfcSegmentIndexSelect> getSegments() {\r\n\t\treturn (EList<IfcSegmentIndexSelect>) eGet(Ifc4Package.Literals.IFC_INDEXED_POLY_CURVE__SEGMENTS, true);\r\n\t}", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "@", "Override", "public", "EList", "<", "IfcSegmentIndexSelect", ">", "getSegments", "(", ")", "{", "return", "(", "EList", "<", "IfcSegmentIndexSelect", ">", ")", "eGet", "(", "Ifc4Package", ".", "Literals", ".", "IFC_INDEXED_POLY_CURVE__SEGMENTS", ",", "true", ")", ";", "}"], "original_string": "@SuppressWarnings(\"unchecked\")\r\n\t@Override\r\n\tpublic EList<IfcSegmentIndexSelect> getSegments() {\r\n\t\treturn (EList<IfcSegmentIndexSelect>) eGet(Ifc4Package.Literals.IFC_INDEXED_POLY_CURVE__SEGMENTS, true);\r\n\t}"}, {"code": "public Map<String, List<String>> getQueryString() {\n    if (querystring == null) {\n      try {\n        querystring = new QueryStringDecoder(request.getUri()).getParameters();\n      } catch (IllegalArgumentException e) {\n        throw new BadRequestException(\"Bad query string: \" + e.getMessage());\n      }\n    }\n    return querystring;\n  }", "code_tokens": ["public", "Map", "<", "String", ",", "List", "<", "String", ">", ">", "getQueryString", "(", ")", "{", "if", "(", "querystring", "==", "null", ")", "{", "try", "{", "querystring", "=", "new", "QueryStringDecoder", "(", "request", ".", "getUri", "(", ")", ")", ".", "getParameters", "(", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "throw", "new", "BadRequestException", "(", "\"Bad query string: \"", "+", "e", ".", "getMessage", "(", ")", ")", ";", "}", "}", "return", "querystring", ";", "}"], "original_string": "public Map<String, List<String>> getQueryString() {\n    if (querystring == null) {\n      try {\n        querystring = new QueryStringDecoder(request.getUri()).getParameters();\n      } catch (IllegalArgumentException e) {\n        throw new BadRequestException(\"Bad query string: \" + e.getMessage());\n      }\n    }\n    return querystring;\n  }"}, {"code": "public static void eachByte(InputStream is, @ClosureParams(value=SimpleType.class, options=\"byte\") Closure closure) throws IOException {\n        try {\n            while (true) {\n                int b = is.read();\n                if (b == -1) {\n                    break;\n                } else {\n                    closure.call((byte) b);\n                }\n            }\n\n            InputStream temp = is;\n            is = null;\n            temp.close();\n        } finally {\n            closeWithWarning(is);\n        }\n    }", "code_tokens": ["public", "static", "void", "eachByte", "(", "InputStream", "is", ",", "@", "ClosureParams", "(", "value", "=", "SimpleType", ".", "class", ",", "options", "=", "\"byte\"", ")", "Closure", "closure", ")", "throws", "IOException", "{", "try", "{", "while", "(", "true", ")", "{", "int", "b", "=", "is", ".", "read", "(", ")", ";", "if", "(", "b", "==", "-", "1", ")", "{", "break", ";", "}", "else", "{", "closure", ".", "call", "(", "(", "byte", ")", "b", ")", ";", "}", "}", "InputStream", "temp", "=", "is", ";", "is", "=", "null", ";", "temp", ".", "close", "(", ")", ";", "}", "finally", "{", "closeWithWarning", "(", "is", ")", ";", "}", "}"], "original_string": "public static void eachByte(InputStream is, @ClosureParams(value=SimpleType.class, options=\"byte\") Closure closure) throws IOException {\n        try {\n            while (true) {\n                int b = is.read();\n                if (b == -1) {\n                    break;\n                } else {\n                    closure.call((byte) b);\n                }\n            }\n\n            InputStream temp = is;\n            is = null;\n            temp.close();\n        } finally {\n            closeWithWarning(is);\n        }\n    }"}, {"code": "@WithBridgeMethods(value = MySQLQuery.class, castRequired = true)\n    public C bigResult() {\n        return addFlag(Position.AFTER_SELECT, SQL_BIG_RESULT);\n    }", "code_tokens": ["@", "WithBridgeMethods", "(", "value", "=", "MySQLQuery", ".", "class", ",", "castRequired", "=", "true", ")", "public", "C", "bigResult", "(", ")", "{", "return", "addFlag", "(", "Position", ".", "AFTER_SELECT", ",", "SQL_BIG_RESULT", ")", ";", "}"], "original_string": "@WithBridgeMethods(value = MySQLQuery.class, castRequired = true)\n    public C bigResult() {\n        return addFlag(Position.AFTER_SELECT, SQL_BIG_RESULT);\n    }"}, {"code": "public Deferred<Object> delete(final TSDB tsdb) {\n    if (uid == null || uid.isEmpty()) {\n      throw new IllegalArgumentException(\"Missing UID\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"Missing type\");\n    }\n\n    final DeleteRequest delete = new DeleteRequest(tsdb.uidTable(), \n        UniqueId.stringToUid(uid), FAMILY, \n        (type.toString().toLowerCase() + \"_meta\").getBytes(CHARSET));\n    return tsdb.getClient().delete(delete);\n  }", "code_tokens": ["public", "Deferred", "<", "Object", ">", "delete", "(", "final", "TSDB", "tsdb", ")", "{", "if", "(", "uid", "==", "null", "||", "uid", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Missing UID\"", ")", ";", "}", "if", "(", "type", "==", "null", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Missing type\"", ")", ";", "}", "final", "DeleteRequest", "delete", "=", "new", "DeleteRequest", "(", "tsdb", ".", "uidTable", "(", ")", ",", "UniqueId", ".", "stringToUid", "(", "uid", ")", ",", "FAMILY", ",", "(", "type", ".", "toString", "(", ")", ".", "toLowerCase", "(", ")", "+", "\"_meta\"", ")", ".", "getBytes", "(", "CHARSET", ")", ")", ";", "return", "tsdb", ".", "getClient", "(", ")", ".", "delete", "(", "delete", ")", ";", "}"], "original_string": "public Deferred<Object> delete(final TSDB tsdb) {\n    if (uid == null || uid.isEmpty()) {\n      throw new IllegalArgumentException(\"Missing UID\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"Missing type\");\n    }\n\n    final DeleteRequest delete = new DeleteRequest(tsdb.uidTable(), \n        UniqueId.stringToUid(uid), FAMILY, \n        (type.toString().toLowerCase() + \"_meta\").getBytes(CHARSET));\n    return tsdb.getClient().delete(delete);\n  }"}, {"code": "public void xmlDeclaration(Map<String, Object> args) {\n        Map<String, Map<String, Object>> map = new HashMap<String, Map<String, Object>>();\n        map.put(\"xml\", args);\n        pi(map);\n    }", "code_tokens": ["public", "void", "xmlDeclaration", "(", "Map", "<", "String", ",", "Object", ">", "args", ")", "{", "Map", "<", "String", ",", "Map", "<", "String", ",", "Object", ">", ">", "map", "=", "new", "HashMap", "<", "String", ",", "Map", "<", "String", ",", "Object", ">", ">", "(", ")", ";", "map", ".", "put", "(", "\"xml\"", ",", "args", ")", ";", "pi", "(", "map", ")", ";", "}"], "original_string": "public void xmlDeclaration(Map<String, Object> args) {\n        Map<String, Map<String, Object>> map = new HashMap<String, Map<String, Object>>();\n        map.put(\"xml\", args);\n        pi(map);\n    }"}, {"code": "public void marshall(GetIntentRequest getIntentRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getIntentRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getIntentRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(getIntentRequest.getVersion(), VERSION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "code_tokens": ["public", "void", "marshall", "(", "GetIntentRequest", "getIntentRequest", ",", "ProtocolMarshaller", "protocolMarshaller", ")", "{", "if", "(", "getIntentRequest", "==", "null", ")", "{", "throw", "new", "SdkClientException", "(", "\"Invalid argument passed to marshall(...)\"", ")", ";", "}", "try", "{", "protocolMarshaller", ".", "marshall", "(", "getIntentRequest", ".", "getName", "(", ")", ",", "NAME_BINDING", ")", ";", "protocolMarshaller", ".", "marshall", "(", "getIntentRequest", ".", "getVersion", "(", ")", ",", "VERSION_BINDING", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "SdkClientException", "(", "\"Unable to marshall request to JSON: \"", "+", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "original_string": "public void marshall(GetIntentRequest getIntentRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (getIntentRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(getIntentRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(getIntentRequest.getVersion(), VERSION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }"}, {"code": "public static List<String> getGroups(String userName, AlluxioConfiguration conf)\n      throws IOException {\n    GroupMappingService groupMappingService = GroupMappingService.Factory.get(conf);\n    return groupMappingService.getGroups(userName);\n  }", "code_tokens": ["public", "static", "List", "<", "String", ">", "getGroups", "(", "String", "userName", ",", "AlluxioConfiguration", "conf", ")", "throws", "IOException", "{", "GroupMappingService", "groupMappingService", "=", "GroupMappingService", ".", "Factory", ".", "get", "(", "conf", ")", ";", "return", "groupMappingService", ".", "getGroups", "(", "userName", ")", ";", "}"], "original_string": "public static List<String> getGroups(String userName, AlluxioConfiguration conf)\n      throws IOException {\n    GroupMappingService groupMappingService = GroupMappingService.Factory.get(conf);\n    return groupMappingService.getGroups(userName);\n  }"}, {"code": "public static <T> T[] takeWhile(T[] self, @ClosureParams(FirstParam.Component.class) Closure condition) {\n        int num = 0;\n        BooleanClosureWrapper bcw = new BooleanClosureWrapper(condition);\n        while (num < self.length) {\n            T value = self[num];\n            if (bcw.call(value)) {\n                num += 1;\n            } else {\n                break;\n            }\n        }\n        return take(self, num);\n    }", "code_tokens": ["public", "static", "<", "T", ">", "T", "[", "]", "takeWhile", "(", "T", "[", "]", "self", ",", "@", "ClosureParams", "(", "FirstParam", ".", "Component", ".", "class", ")", "Closure", "condition", ")", "{", "int", "num", "=", "0", ";", "BooleanClosureWrapper", "bcw", "=", "new", "BooleanClosureWrapper", "(", "condition", ")", ";", "while", "(", "num", "<", "self", ".", "length", ")", "{", "T", "value", "=", "self", "[", "num", "]", ";", "if", "(", "bcw", ".", "call", "(", "value", ")", ")", "{", "num", "+=", "1", ";", "}", "else", "{", "break", ";", "}", "}", "return", "take", "(", "self", ",", "num", ")", ";", "}"], "original_string": "public static <T> T[] takeWhile(T[] self, @ClosureParams(FirstParam.Component.class) Closure condition) {\n        int num = 0;\n        BooleanClosureWrapper bcw = new BooleanClosureWrapper(condition);\n        while (num < self.length) {\n            T value = self[num];\n            if (bcw.call(value)) {\n                num += 1;\n            } else {\n                break;\n            }\n        }\n        return take(self, num);\n    }"}, {"code": "@Override\n\tpublic void writeShort(short v) throws IOException {\n\t\toutputStream.write(0xFF & v);\n\t\toutputStream.write(0xFF & (v >> 8));\n\t\tbytesWritten += 2;\n\t}", "code_tokens": ["@", "Override", "public", "void", "writeShort", "(", "short", "v", ")", "throws", "IOException", "{", "outputStream", ".", "write", "(", "0xFF", "&", "v", ")", ";", "outputStream", ".", "write", "(", "0xFF", "&", "(", "v", ">>", "8", ")", ")", ";", "bytesWritten", "+=", "2", ";", "}"], "original_string": "@Override\n\tpublic void writeShort(short v) throws IOException {\n\t\toutputStream.write(0xFF & v);\n\t\toutputStream.write(0xFF & (v >> 8));\n\t\tbytesWritten += 2;\n\t}"}, {"code": "@ResponseBody\n    @RequestMapping(value = \"/filetext\", method = RequestMethod.POST)\n    public JsonObjectBase updateFileWithText(@Valid ConfNewForm confNewForm, @NotNull String fileContent,\n                                             @NotNull String fileName) {\n\n        LOG.info(confNewForm.toString());\n\n        // \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u8868\u683c\n        ConfNewItemForm confNewItemForm = new ConfNewItemForm(confNewForm);\n        confNewItemForm.setKey(fileName);\n        confNewItemForm.setValue(fileContent);\n\n        // \u4e1a\u52a1\u6821\u9a8c\n        configValidator.validateNew(confNewItemForm, DisConfigTypeEnum.FILE);\n\n        //\n        configMgr.newConfig(confNewItemForm, DisConfigTypeEnum.FILE);\n\n        return buildSuccess(\"\u521b\u5efa\u6210\u529f\");\n    }", "code_tokens": ["@", "ResponseBody", "@", "RequestMapping", "(", "value", "=", "\"/filetext\"", ",", "method", "=", "RequestMethod", ".", "POST", ")", "public", "JsonObjectBase", "updateFileWithText", "(", "@", "Valid", "ConfNewForm", "confNewForm", ",", "@", "NotNull", "String", "fileContent", ",", "@", "NotNull", "String", "fileName", ")", "{", "LOG", ".", "info", "(", "confNewForm", ".", "toString", "(", ")", ")", ";", "// \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u8868\u683c", "ConfNewItemForm", "confNewItemForm", "=", "new", "ConfNewItemForm", "(", "confNewForm", ")", ";", "confNewItemForm", ".", "setKey", "(", "fileName", ")", ";", "confNewItemForm", ".", "setValue", "(", "fileContent", ")", ";", "// \u4e1a\u52a1\u6821\u9a8c", "configValidator", ".", "validateNew", "(", "confNewItemForm", ",", "DisConfigTypeEnum", ".", "FILE", ")", ";", "//", "configMgr", ".", "newConfig", "(", "confNewItemForm", ",", "DisConfigTypeEnum", ".", "FILE", ")", ";", "return", "buildSuccess", "(", "\"\u521b\u5efa\u6210\u529f\");", "", "", "}"], "original_string": "@ResponseBody\n    @RequestMapping(value = \"/filetext\", method = RequestMethod.POST)\n    public JsonObjectBase updateFileWithText(@Valid ConfNewForm confNewForm, @NotNull String fileContent,\n                                             @NotNull String fileName) {\n\n        LOG.info(confNewForm.toString());\n\n        // \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u8868\u683c\n        ConfNewItemForm confNewItemForm = new ConfNewItemForm(confNewForm);\n        confNewItemForm.setKey(fileName);\n        confNewItemForm.setValue(fileContent);\n\n        // \u4e1a\u52a1\u6821\u9a8c\n        configValidator.validateNew(confNewItemForm, DisConfigTypeEnum.FILE);\n\n        //\n        configMgr.newConfig(confNewItemForm, DisConfigTypeEnum.FILE);\n\n        return buildSuccess(\"\u521b\u5efa\u6210\u529f\");\n    }"}, {"code": "protected void parseProcessArchive(Element element, List<ProcessArchiveXml> parsedProcessArchives) {\n\n    ProcessArchiveXmlImpl processArchive = new ProcessArchiveXmlImpl();\n\n    processArchive.setName(element.attribute(NAME));\n    processArchive.setTenantId(element.attribute(TENANT_ID));\n\n    List<String> processResourceNames = new ArrayList<String>();\n\n    Map<String, String> properties = new HashMap<String, String>();\n    for (Element childElement : element.elements()) {\n      if(PROCESS_ENGINE.equals(childElement.getTagName())) {\n        processArchive.setProcessEngineName(childElement.getText());\n\n      } else if(PROCESS.equals(childElement.getTagName()) || RESOURCE.equals(childElement.getTagName())) {\n        processResourceNames.add(childElement.getText());\n\n      } else if(PROPERTIES.equals(childElement.getTagName())) {\n        parseProperties(childElement, properties);\n\n      }\n    }\n\n    // set properties\n    processArchive.setProperties(properties);\n\n    // add collected resource names.\n    processArchive.setProcessResourceNames(processResourceNames);\n\n    // add process archive to list of parsed archives.\n    parsedProcessArchives.add(processArchive);\n\n  }", "code_tokens": ["protected", "void", "parseProcessArchive", "(", "Element", "element", ",", "List", "<", "ProcessArchiveXml", ">", "parsedProcessArchives", ")", "{", "ProcessArchiveXmlImpl", "processArchive", "=", "new", "ProcessArchiveXmlImpl", "(", ")", ";", "processArchive", ".", "setName", "(", "element", ".", "attribute", "(", "NAME", ")", ")", ";", "processArchive", ".", "setTenantId", "(", "element", ".", "attribute", "(", "TENANT_ID", ")", ")", ";", "List", "<", "String", ">", "processResourceNames", "=", "new", "ArrayList", "<", "String", ">", "(", ")", ";", "Map", "<", "String", ",", "String", ">", "properties", "=", "new", "HashMap", "<", "String", ",", "String", ">", "(", ")", ";", "for", "(", "Element", "childElement", ":", "element", ".", "elements", "(", ")", ")", "{", "if", "(", "PROCESS_ENGINE", ".", "equals", "(", "childElement", ".", "getTagName", "(", ")", ")", ")", "{", "processArchive", ".", "setProcessEngineName", "(", "childElement", ".", "getText", "(", ")", ")", ";", "}", "else", "if", "(", "PROCESS", ".", "equals", "(", "childElement", ".", "getTagName", "(", ")", ")", "||", "RESOURCE", ".", "equals", "(", "childElement", ".", "getTagName", "(", ")", ")", ")", "{", "processResourceNames", ".", "add", "(", "childElement", ".", "getText", "(", ")", ")", ";", "}", "else", "if", "(", "PROPERTIES", ".", "equals", "(", "childElement", ".", "getTagName", "(", ")", ")", ")", "{", "parseProperties", "(", "childElement", ",", "properties", ")", ";", "}", "}", "// set properties", "processArchive", ".", "setProperties", "(", "properties", ")", ";", "// add collected resource names.", "processArchive", ".", "setProcessResourceNames", "(", "processResourceNames", ")", ";", "// add process archive to list of parsed archives.", "parsedProcessArchives", ".", "add", "(", "processArchive", ")", ";", "}"], "original_string": "protected void parseProcessArchive(Element element, List<ProcessArchiveXml> parsedProcessArchives) {\n\n    ProcessArchiveXmlImpl processArchive = new ProcessArchiveXmlImpl();\n\n    processArchive.setName(element.attribute(NAME));\n    processArchive.setTenantId(element.attribute(TENANT_ID));\n\n    List<String> processResourceNames = new ArrayList<String>();\n\n    Map<String, String> properties = new HashMap<String, String>();\n    for (Element childElement : element.elements()) {\n      if(PROCESS_ENGINE.equals(childElement.getTagName())) {\n        processArchive.setProcessEngineName(childElement.getText());\n\n      } else if(PROCESS.equals(childElement.getTagName()) || RESOURCE.equals(childElement.getTagName())) {\n        processResourceNames.add(childElement.getText());\n\n      } else if(PROPERTIES.equals(childElement.getTagName())) {\n        parseProperties(childElement, properties);\n\n      }\n    }\n\n    // set properties\n    processArchive.setProperties(properties);\n\n    // add collected resource names.\n    processArchive.setProcessResourceNames(processResourceNames);\n\n    // add process archive to list of parsed archives.\n    parsedProcessArchives.add(processArchive);\n\n  }"}, {"code": "public void marshall(ListQueuesRequest listQueuesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listQueuesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listQueuesRequest.getListBy(), LISTBY_BINDING);\n            protocolMarshaller.marshall(listQueuesRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(listQueuesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listQueuesRequest.getOrder(), ORDER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }", "code_tokens": ["public", "void", "marshall", "(", "ListQueuesRequest", "listQueuesRequest", ",", "ProtocolMarshaller", "protocolMarshaller", ")", "{", "if", "(", "listQueuesRequest", "==", "null", ")", "{", "throw", "new", "SdkClientException", "(", "\"Invalid argument passed to marshall(...)\"", ")", ";", "}", "try", "{", "protocolMarshaller", ".", "marshall", "(", "listQueuesRequest", ".", "getListBy", "(", ")", ",", "LISTBY_BINDING", ")", ";", "protocolMarshaller", ".", "marshall", "(", "listQueuesRequest", ".", "getMaxResults", "(", ")", ",", "MAXRESULTS_BINDING", ")", ";", "protocolMarshaller", ".", "marshall", "(", "listQueuesRequest", ".", "getNextToken", "(", ")", ",", "NEXTTOKEN_BINDING", ")", ";", "protocolMarshaller", ".", "marshall", "(", "listQueuesRequest", ".", "getOrder", "(", ")", ",", "ORDER_BINDING", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "throw", "new", "SdkClientException", "(", "\"Unable to marshall request to JSON: \"", "+", "e", ".", "getMessage", "(", ")", ",", "e", ")", ";", "}", "}"], "original_string": "public void marshall(ListQueuesRequest listQueuesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listQueuesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listQueuesRequest.getListBy(), LISTBY_BINDING);\n            protocolMarshaller.marshall(listQueuesRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(listQueuesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listQueuesRequest.getOrder(), ORDER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }"}]